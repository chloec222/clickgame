{"version":3,"sources":["components/Card/Card.js","components/Wrapper/Wrapper.js","components/Score/Score.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","name","src","image","id","onClick","shuffleScoreCard","Wrapper","children","Score","total","status","App","state","logos","clickedlogoIds","score","goal","includes","setState","push","length","console","log","i","j","Math","floor","random","this","map","logo","key","href","target","rel","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"o7CAYeA,G,MAPF,SAAAC,GAAK,OAChB,yBAAKC,UAAU,4BACX,yBAAKC,IAAKF,EAAMG,KAAMC,IAAKJ,EAAMK,MAAOC,GAAIN,EAAMM,GAChDC,QAAS,kBAAMP,EAAMQ,iBAAiBR,EAAMM,KAAKL,UAAU,oBCDpDQ,G,MAFC,SAAAT,GAAK,OAAI,yBAAKC,UAAU,WAAWD,EAAMU,YCM1CC,G,MAPD,SAAAX,GAAK,OACjB,yBAAKC,UAAU,aACb,wBAAIA,UAAU,SAAd,eAAmCD,EAAMY,OACzC,wBAAIX,UAAU,UAAUD,EAAMa,W,OCgFnBC,G,kNA7EbC,MAAQ,CACNC,QACAC,eAAgB,GAChBC,MAAO,EACPC,KAAM,EACNN,OAAQ,I,EAIVL,iBAAmB,SAAAF,GACjB,IAAIW,EAAiB,EAAKF,MAAME,eAEhC,GAAGA,EAAeG,SAASd,GACzB,EAAKe,SAAS,CAAEJ,eAAgB,GAAIC,MAAO,EAAGL,OAAS,mBADzD,CAME,GAFAI,EAAeK,KAAKhB,GAES,IAA1BW,EAAeM,OAGhB,OAFA,EAAKF,SAAS,CAACH,MAAO,EAAGL,OAAQ,0BAA2BI,eAAgB,UAC5EO,QAAQC,IAAI,QAId,EAAKJ,SAAS,CAAEL,QAAOC,iBAAgBC,MAAOD,EAAeM,OAAQV,OAAQ,MAE7E,IAAK,IAAIa,EAAIV,EAAMO,OAAS,EAAGG,EAAI,EAAGA,IAAK,CACzC,IAAIC,EAAIC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IADC,EAElB,CAACV,EAAMW,GAAIX,EAAMU,IAAvCV,EAAMU,GAFkC,KAE9BV,EAAMW,GAFwB,Q,uDAQrC,IAAD,OACP,OACE,yBAAK1B,UAAU,OACb,4BAAQA,UAAU,cAClB,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,YACf,wBAAIA,UAAU,aAAd,aACF,uBAAGA,UAAU,aAAb,uDAQF,kBAAC,EAAD,CAAOW,MAAOmB,KAAKhB,MAAMG,MAClBC,KAAM,EACNN,OAAQkB,KAAKhB,MAAMF,SAE1B,kBAAC,EAAD,KACGkB,KAAKhB,MAAMC,MAAMgB,KAAI,SAAAC,GAAI,OACxB,kBAAC,EAAD,CACEzB,iBAAkB,EAAKA,iBACvBF,GAAI2B,EAAK3B,GACT4B,IAAKD,EAAK3B,GACVD,MAAO4B,EAAK5B,YAIlB,yBAAKJ,UAAU,8BACT,gCACE,2BACE,uBAAGkC,KAAK,+BAA+BC,OAAO,SAASC,IAAI,sBAAsB/B,GAAG,UAApF,sB,GArEAgC,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.d21e07f9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Card.css\";\r\n\r\n//this component is only rendering the images to the screen and can be a simple render function it is a\r\n//stateless component\r\nconst Card = props => (\r\n  <div className=\"card img-container hover\">\r\n      <img alt={props.name} src={props.image} id={props.id}\r\n        onClick={() => props.shuffleScoreCard(props.id)} className='shuffleScore'/>\r\n  </div>\r\n);\r\n\r\nexport default Card;","  \r\nimport React from \"react\";\r\nimport \"./Wrapper.css\";\r\n\r\n//stateless component\r\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\r\n\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"./Score.css\";\r\n\r\n//stateless component\r\nconst Score = props => (\r\n  <div className=\"gameScore\">\r\n    <h4 className=\"score\">YOUR SCORE: {props.total}</h4>\r\n    <h4 className=\"status\">{props.status}</h4>\r\n  </div>\r\n);\r\n\r\nexport default Score;","\nimport React, { Component } from \"react\";\nimport Card from \"./components/Card\";\nimport Wrapper from \"./components/Wrapper\";\nimport Score from \"./components/Score\";\nimport logos from \"./cards.json\";\nimport \"./App.css\";\n\nclass App extends Component {\n  // Setting this.state.logos to the cards json array\n  state = {\n    logos,\n    clickedlogoIds: [],\n    score: 0,\n    goal: 8,\n    status: \"\"\n  };\n\n  //shuffle the pup cards in the browser when clicked\n  shuffleScoreCard = id => {\n    let clickedlogoIds = this.state.clickedlogoIds;\n\n    if(clickedlogoIds.includes(id)){\n      this.setState({ clickedlogoIds: [], score: 0, status:  \"TRY AGAIN.\" });\n      return;\n    }else{\n      clickedlogoIds.push(id)\n\n      if(clickedlogoIds.length === 8){\n        this.setState({score: 8, status: \"YOU DID IT. PLAY AGAIN.\", clickedlogoIds: []});\n        console.log('WIN.');\n        return;\n      }\n\n      this.setState({ logos, clickedlogoIds, score: clickedlogoIds.length, status: \" \" });\n\n      for (let i = logos.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [logos[i], logos[j]] = [logos[j], logos[i]];\n      }\n    }\n  }\n\n  // Map over this.state.cards and render a Card component for each card object\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col mt-3\">\n            <h1 className=\"App-title\">VIRAL-316</h1>\n          <p className=\"App-intro\">\n            STAY ON THE RUN. DON'T CLICK IT TWICE. AND WIN. \n          </p>\n            </div>\n          </div>\n        </div>\n          \n        </header>\n        <Score total={this.state.score}\n               goal={8}\n               status={this.state.status}\n               />\n        <Wrapper>\n          {this.state.logos.map(logo => (\n            <Card\n              shuffleScoreCard={this.shuffleScoreCard}\n              id={logo.id}\n              key={logo.id}\n              image={logo.image}\n            />\n          ))}\n        </Wrapper>\n        <div className=\"container mt-5 text-center\">\n              <footer>\n                <p>\n                  <a href=\"https://github.com/chloec222\" target=\"_blank\" rel=\"noopener noreferrer\" id=\"footer\">CHLOE CHOI</a>\n                </p>\n              </footer>\n        </div>\n\n    </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}